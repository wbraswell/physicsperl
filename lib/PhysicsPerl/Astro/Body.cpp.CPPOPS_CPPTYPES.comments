// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__Body_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__Body_cpp 0.002_100

// [[[ INCLUDES ]]]

// NEED FIX
#include "PhysicsPerl/Astro/Body.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO METHODS & SUBROUTINES ]]]

// DEV NOTE, CORRELATION #pp04: do not inline constructors and destructors (even empty ones) in *.h, could cause slowdown of vector creation
PhysicsPerl__Astro__Body::PhysicsPerl__Astro__Body() {}
PhysicsPerl__Astro__Body::~PhysicsPerl__Astro__Body() {}
PhysicsPerl__Astro__Body::PhysicsPerl__Astro__Body(const PhysicsPerl__Astro__Body&) {};  // non-default copy constructor

// NEED FIX
/*
void PhysicsPerl__Astro__Body::offset_momentum(number px, number py, number pz) {
    this->vx = -1 * (px / SOLAR_MASS);
    this->vy = -1 * (py / SOLAR_MASS);
    this->vz = -1 * (pz / SOLAR_MASS);
}
*/

/*
PhysicsPerl__Astro__Body* sun() {
    PhysicsPerl__Astro__Body* p;
    p->x =    0;
    p->y =    0;
    p->z =    0;
    p->vx =   0;
    p->vy =   0;
    p->vz =   0;
    p->mass = SOLAR_MASS;
    return p;
}

PhysicsPerl__Astro__Body* jupiter() {
    PhysicsPerl__Astro__Body* p;
    p->x =    +4.84143144246472090e+00;
    p->y =    -1.16032004402742839e+00;
    p->z =    -1.03622044471123109e-01;
    p->vx =   +1.66007664274403694e-03 * DAYS_PER_YEAR;
    p->vy =   +7.69901118419740425e-03 * DAYS_PER_YEAR;
    p->vz =   -6.90460016972063023e-05 * DAYS_PER_YEAR;
    p->mass = +9.54791938424326609e-04 * SOLAR_MASS;
    return p;
}

PhysicsPerl__Astro__Body* saturn() {
    PhysicsPerl__Astro__Body* p;
    p->x =    +8.34336671824457987e+00;
    p->y =    +4.12479856412430479e+00;
    p->z =    -4.03523417114321381e-01;
    p->vx =   -2.76742510726862411e-03 * DAYS_PER_YEAR;
    p->vy =   +4.99852801234917238e-03 * DAYS_PER_YEAR;
    p->vz =   +2.30417297573763929e-05 * DAYS_PER_YEAR;
    p->mass = +2.85885980666130812e-04 * SOLAR_MASS;
    return p;
}

PhysicsPerl__Astro__Body* uranus() {
    PhysicsPerl__Astro__Body* p;
    p->x =    +1.28943695621391310e+01;
    p->y =    -1.51111514016986312e+01;
    p->z =    -2.23307578892655734e-01;
    p->vx =   +2.96460137564761618e-03 * DAYS_PER_YEAR;
    p->vy =   +2.37847173959480950e-03 * DAYS_PER_YEAR;
    p->vz =   -2.96589568540237556e-05 * DAYS_PER_YEAR;
    p->mass = +4.36624404335156298e-05 * SOLAR_MASS;
    return p;
}

PhysicsPerl__Astro__Body* neptune() {
    PhysicsPerl__Astro__Body* p;
    p->x =    +1.53796971148509165e+01;
    p->y =    -2.59193146099879641e+01;
    p->z =    +1.79258772950371181e-01;
    p->vx =   +2.68067772490389322e-03 * DAYS_PER_YEAR;
    p->vy =   +1.62824170038242295e-03 * DAYS_PER_YEAR;
    p->vz =   -9.51592254519715870e-05 * DAYS_PER_YEAR;
    p->mass = +5.15138902046611451e-05 * SOLAR_MASS;
    return p;
}
*/

std::unique_ptr<PhysicsPerl__Astro__Body> sun() {
    std::unique_ptr<PhysicsPerl__Astro__Body> p(new PhysicsPerl__Astro__Body);
    p->x =    0;
    p->y =    0;
    p->z =    0;
    p->vx =   0;
    p->vy =   0;
    p->vz =   0;
    p->mass = SOLAR_MASS;
    return p;
}

std::unique_ptr<PhysicsPerl__Astro__Body> jupiter() {
    // NEED UPGRADE: use std::make_unique() here and below to fulfill "no naked news", added to C++14 feature set in GCC 4.9, wait for mainstream adoption
    std::unique_ptr<PhysicsPerl__Astro__Body> p(new PhysicsPerl__Astro__Body);
    p->x =    +4.84143144246472090e+00;
    p->y =    -1.16032004402742839e+00;
    p->z =    -1.03622044471123109e-01;
    p->vx =   +1.66007664274403694e-03 * DAYS_PER_YEAR;
    p->vy =   +7.69901118419740425e-03 * DAYS_PER_YEAR;
    p->vz =   -6.90460016972063023e-05 * DAYS_PER_YEAR;
    p->mass = +9.54791938424326609e-04 * SOLAR_MASS;
    return p;
}

std::unique_ptr<PhysicsPerl__Astro__Body> saturn() {
    std::unique_ptr<PhysicsPerl__Astro__Body> p(new PhysicsPerl__Astro__Body);
    p->x =    +8.34336671824457987e+00;
    p->y =    +4.12479856412430479e+00;
    p->z =    -4.03523417114321381e-01;
    p->vx =   -2.76742510726862411e-03 * DAYS_PER_YEAR;
    p->vy =   +4.99852801234917238e-03 * DAYS_PER_YEAR;
    p->vz =   +2.30417297573763929e-05 * DAYS_PER_YEAR;
    p->mass = +2.85885980666130812e-04 * SOLAR_MASS;
    return p;
}

std::unique_ptr<PhysicsPerl__Astro__Body> uranus() {
    std::unique_ptr<PhysicsPerl__Astro__Body> p(new PhysicsPerl__Astro__Body);
    p->x =    +1.28943695621391310e+01;
    p->y =    -1.51111514016986312e+01;
    p->z =    -2.23307578892655734e-01;
    p->vx =   +2.96460137564761618e-03 * DAYS_PER_YEAR;
    p->vy =   +2.37847173959480950e-03 * DAYS_PER_YEAR;
    p->vz =   -2.96589568540237556e-05 * DAYS_PER_YEAR;
    p->mass = +4.36624404335156298e-05 * SOLAR_MASS;
    return p;
}

std::unique_ptr<PhysicsPerl__Astro__Body> neptune() {
    std::unique_ptr<PhysicsPerl__Astro__Body> p(new PhysicsPerl__Astro__Body);
    p->x =    +1.53796971148509165e+01;
    p->y =    -2.59193146099879641e+01;
    p->z =    +1.79258772950371181e-01;
    p->vx =   +2.68067772490389322e-03 * DAYS_PER_YEAR;
    p->vy =   +1.62824170038242295e-03 * DAYS_PER_YEAR;
    p->vz =   -9.51592254519715870e-05 * DAYS_PER_YEAR;
    p->mass = +5.15138902046611451e-05 * SOLAR_MASS;
    return p;
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
