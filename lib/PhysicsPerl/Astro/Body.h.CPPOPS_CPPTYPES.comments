// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__Body_h
#define __CPP__INCLUDED__PhysicsPerl__Astro__Body_h 0.002_100

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/CompileUnit/Module/Class.cpp>

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ CONSTANTS ]]]
const number PI = 3.141592653589793;
const number SOLAR_MASS = 39.4784176043574;
const number DAYS_PER_YEAR = 365.24;

// [[[ OO INHERITANCE ]]]
class PhysicsPerl__Astro__Body : public RPerl__CompileUnit__Module__Class__CPP {
public:

// [[[ OO METHODS ]]]
        // NEED FIX: not declared in this scope
//    void offset_momentum(number px, number py, number pz);  // ERROR

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
/*
    number get_x() { return this->x; }
    void set_x(number x_new) { this->x = x_new; }
    number get_y() { return this->y; }
    void set_y(number y_new) { this->y = y_new; }
    number get_z() { return this->z; }
    void set_z(number z_new) { this->z = z_new; }
    number get_vx() { return this->vx; }
    void set_vx(number vx_new) { this->vx = vx_new; }
    number get_vy() { return this->vy; }
    void set_vy(number vy_new) { this->vy = vy_new; }
    number get_vz() { return this->vz; }
    void set_vz(number vz_new) { this->vz = vz_new; }
    number get_mass() { return this->mass; }
    void set_mass(number mass_new) { this->mass = mass_new; }
*/

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
// DEV NOTE, CORRELATION #21: do not inline constructors and destructors (even empty ones) in *.h, could cause slowdown of vector creation
//    PhysicsPerl__Astro__Body() {}
//    ~PhysicsPerl__Astro__Body() {}
    PhysicsPerl__Astro__Body();
    ~PhysicsPerl__Astro__Body();
    PhysicsPerl__Astro__Body(const PhysicsPerl__Astro__Body&);  // non-default copy constructor

    // <<< CLASS NAME REPORTER >>>
//    virtual string myclassname() { return (const string) "PhysicsPerl::Astro::Body"; }

//private:
// [[[ OO PROPERTIES ]]]
    number x;
    number y;
    number z;
    number vx;
    number vy;
    number vz;
    number mass;
 
//        int foo() { return 2112; }
};

// [[[ SUBROUTINES ]]]

/*
PhysicsPerl__Astro__Body* sun();
PhysicsPerl__Astro__Body* jupiter();
PhysicsPerl__Astro__Body* saturn();
PhysicsPerl__Astro__Body* uranus();
PhysicsPerl__Astro__Body* neptune();
*/

std::unique_ptr<PhysicsPerl__Astro__Body> sun();
std::unique_ptr<PhysicsPerl__Astro__Body> jupiter();
std::unique_ptr<PhysicsPerl__Astro__Body> saturn();
std::unique_ptr<PhysicsPerl__Astro__Body> uranus();
std::unique_ptr<PhysicsPerl__Astro__Body> neptune();

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer PhysicsPerl__Astro__Body__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
