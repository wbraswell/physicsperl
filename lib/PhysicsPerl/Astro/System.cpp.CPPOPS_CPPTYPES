// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp 0.008_000

// [[[ INCLUDES ]]]
#include "PhysicsPerl/Astro/System.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void PhysicsPerl__Astro__System::init() {
    integer i;
    this->bodies[0] = PhysicsPerl__Astro__Body__sun();
    this->bodies[1] = PhysicsPerl__Astro__Body__mercury();
    this->bodies[2] = PhysicsPerl__Astro__Body__venus();
    this->bodies[3] = PhysicsPerl__Astro__Body__earth();
    this->bodies[4] = PhysicsPerl__Astro__Body__mars();
    this->bodies[5] = PhysicsPerl__Astro__Body__jupiter();
    this->bodies[6] = PhysicsPerl__Astro__Body__saturn();
    this->bodies[7] = PhysicsPerl__Astro__Body__uranus();
    this->bodies[8] = PhysicsPerl__Astro__Body__neptune();
    this->bodies[9] = PhysicsPerl__Astro__Body__pluto();
    number px = 0.0;
    number py = 0.0;
    number pz = 0.0;
    for ( i = 0; i < (this->bodies.size()); i++ ) {
        px += this->bodies[i]->vx * this->bodies[i]->mass;
        py += this->bodies[i]->vy * this->bodies[i]->mass;
        pz += this->bodies[i]->vz * this->bodies[i]->mass;
    }
    this->bodies[0]->vx = -1 * (px / PhysicsPerl__Astro__Body__FOUR_PI_SQUARED);
    this->bodies[0]->vy = -1 * (py / PhysicsPerl__Astro__Body__FOUR_PI_SQUARED);
    this->bodies[0]->vz = -1 * (pz / PhysicsPerl__Astro__Body__FOUR_PI_SQUARED);
    return;
}

number PhysicsPerl__Astro__System::energy() {
    integer i;
    integer j;
    number dx;
    number dy;
    number dz;
    number distance;
    number e = 0.0;
    for ( i = 0; i < (this->bodies.size()); i++ ) {
        PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get_raw();
        e += 0.5 * body_i->mass * ((body_i->vx * body_i->vx) + (body_i->vy * body_i->vy) + (body_i->vz * body_i->vz));
        for ( j = (i + 1); j < (this->bodies.size()); j++ ) {
            PhysicsPerl__Astro__Body_rawptr body_j = this->bodies[j].get_raw();
            dx = body_i->x - body_j->x;
            dy = body_i->y - body_j->y;
            dz = body_i->z - body_j->z;
            distance = pow(((dx * dx) + (dy * dy) + (dz * dz)), 0.5);
            e -= (body_i->mass * body_j->mass) / distance;
        }
    }
    return e;
    return e;
}

void PhysicsPerl__Astro__System::advance_loop(const number delta_time, const integer time_step_max) {
    integer i;
    integer j;
    integer time_step;
    const integer bodies_size = this->bodies.size();
    number dx;
    number dy;
    number dz;
    number distance_squared;
    number distance;
    number magnitude;
    PhysicsPerl__Astro__Body_rawptr body_i;
    PhysicsPerl__Astro__Body_rawptr body_j;
    for ( time_step = 1; time_step <= time_step_max; time_step++ ) {
        if ( (time_step % 25000) == 0 ) {
            print "Time Step " << integer_to_string(time_step) << " of " << integer_to_string(time_step_max) << ", energy = " << number_to_string(this->energy()) << endl;
        }
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get_raw();
            for ( j = (i + 1); j < bodies_size; j++ ) {
                body_j = this->bodies[j].get_raw();
                dx = body_i->x - body_j->x;
                dy = body_i->y - body_j->y;
                dz = body_i->z - body_j->z;
                distance_squared = (dx * dx) + (dy * dy) + (dz * dz);
                distance = pow(distance_squared, 0.5);
                magnitude = delta_time / (distance_squared * distance);
                body_i->vx -= dx * body_j->mass * magnitude;
                body_i->vy -= dy * body_j->mass * magnitude;
                body_i->vz -= dz * body_j->mass * magnitude;
                body_j->vx += dx * body_i->mass * magnitude;
                body_j->vy += dy * body_i->mass * magnitude;
                body_j->vz += dz * body_i->mass * magnitude;
            }
        }
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get_raw();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
    }
    return;
    return;
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
