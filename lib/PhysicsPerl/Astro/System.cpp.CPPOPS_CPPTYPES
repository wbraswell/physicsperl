using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp 0.006_000

#include "PhysicsPerl/Astro/System.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

void PhysicsPerl__Astro__System::get_bodies_element(integer i, PhysicsPerl__Astro__Body* body_tmp) { 
    PhysicsPerl__Astro__Body* body_i = this->bodies[i].get();
    body_tmp->name = body_i->name;
    body_tmp->x = body_i->x;
    body_tmp->y = body_i->y;
    body_tmp->z = body_i->z;
    body_tmp->vx = body_i->vx;
    body_tmp->vy = body_i->vy;
    body_tmp->vz = body_i->vz;
    body_tmp->mass = body_i->mass;
    body_tmp->radius = body_i->radius;
    body_tmp->color = body_i->color;
}

void PhysicsPerl__Astro__System::init() {
    this->bodies.resize(5);
    this->bodies[0] = sun();
    this->bodies[1] = jupiter();
    this->bodies[2] = saturn();
    this->bodies[3] = uranus();
    this->bodies[4] = neptune();

    number px = 0.0;
    number py = 0.0;
    number pz = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        px += this->bodies[i]->vx * this->bodies[i]->mass;
        py += this->bodies[i]->vy * this->bodies[i]->mass;
        pz += this->bodies[i]->vz * this->bodies[i]->mass;
    }

    this->bodies[0]->vx = -1 * (px / SOLAR_MASS);
    this->bodies[0]->vy = -1 * (py / SOLAR_MASS);
    this->bodies[0]->vz = -1 * (pz / SOLAR_MASS);
}

number PhysicsPerl__Astro__System::energy() {
    number dx;
    number dy;
    number dz;
    number distance;
    number e = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        PhysicsPerl__Astro__Body* body_i = this->bodies[i].get();
        e += 0.5 * body_i->mass * ((body_i->vx * body_i->vx) + (body_i->vy * body_i->vy) + (body_i->vz * body_i->vz));
        for ( integer j = (i + 1); j <= ((this->bodies.size()) - 1); j++ ) {
            PhysicsPerl__Astro__Body* body_j = this->bodies[j].get();
            dx = body_i->x - body_j->x;
            dy = body_i->y - body_j->y;
            dz = body_i->z - body_j->z;
            distance = pow(((dx * dx) + (dy * dy) + (dz * dz)), 0.5);
            e -= (body_i->mass * body_j->mass) / distance;
        }
    }
    return e;
}

void PhysicsPerl__Astro__System::advance_loop(const number delta_time, const integer time_step_max) {
    integer time_step;
    integer i;
    integer j;

    const integer bodies_size = this->bodies.size();
    number dx;
    number dy;
    number dz;
    number distance_squared;
    number distance;
    number magnitude;
    PhysicsPerl__Astro__Body* body_i;
    PhysicsPerl__Astro__Body* body_j;

    for ( time_step = 1; time_step <= time_step_max; time_step++ ) { 
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get();
            for ( j = (i + 1); j < bodies_size; j++ ) {
                body_j = this->bodies[j].get();
                dx = body_i->x - body_j->x;
                dy = body_i->y - body_j->y;
                dz = body_i->z - body_j->z;
                distance_squared = (dx * dx) + (dy * dy) + (dz * dz);
                distance = pow(distance_squared, 0.5);
                magnitude = delta_time / (distance_squared * distance);
                body_i->vx -= dx * body_j->mass * magnitude;
                body_i->vy -= dy * body_j->mass * magnitude;
                body_i->vz -= dz * body_j->mass * magnitude;
                body_j->vx += dx * body_i->mass * magnitude;
                body_j->vy += dy * body_i->mass * magnitude;
                body_j->vz += dz * body_i->mass * magnitude;
            }
        }
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
    }
}

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
