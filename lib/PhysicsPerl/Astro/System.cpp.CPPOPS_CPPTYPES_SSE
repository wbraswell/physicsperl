using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp 0.004_000

#include "/home/wbraswell/school/physicsperl/physicsperl-latest/lib/PhysicsPerl/Astro/System.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

void PhysicsPerl__Astro__System::init() {
    this->bodies.resize(5);
    this->bodies[0] = sun();
    this->bodies[1] = jupiter();
    this->bodies[2] = saturn();
    this->bodies[3] = uranus();
    this->bodies[4] = neptune();

    number px = 0.0;
    number py = 0.0;
    number pz = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        px += this->bodies[i]->vx * this->bodies[i]->mass;
        py += this->bodies[i]->vy * this->bodies[i]->mass;
        pz += this->bodies[i]->vz * this->bodies[i]->mass;
    }

    this->bodies[0]->vx = -1 * (px / SOLAR_MASS);
    this->bodies[0]->vy = -1 * (py / SOLAR_MASS);
    this->bodies[0]->vz = -1 * (pz / SOLAR_MASS);
}

number PhysicsPerl__Astro__System::energy() {
    number dx;
    number dy;
    number dz;
    number distance;
    number e = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        PhysicsPerl__Astro__Body* i_body = this->bodies[i].get();
        e += 0.5 * i_body->mass * ((i_body->vx * i_body->vx) + (i_body->vy * i_body->vy) + (i_body->vz * i_body->vz));
        for ( integer j = (i + 1); j <= ((this->bodies.size()) - 1); j++ ) {
            PhysicsPerl__Astro__Body* j_body = this->bodies[j].get();
            dx = i_body->x - j_body->x;
            dy = i_body->y - j_body->y;
            dz = i_body->z - j_body->z;
            distance = pow(((dx * dx) + (dy * dy) + (dz * dz)), 0.5);
            e -= (i_body->mass * j_body->mass) / distance;
        }
    }
    return e;
}

void PhysicsPerl__Astro__System::advance_loop(const number dt, const integer time_steps) {
    integer bodies_size = this->bodies.size();
    const unsigned int N = 10;

    number_arrayref dx_array;
    number_arrayref dy_array;
    number_arrayref dz_array;
    number_arrayref magnitude_array;
    dx_array.resize(N);
    dy_array.resize(N);
    dz_array.resize(N);
    magnitude_array.resize(N);

    const __m128d dt_sse = _mm_set1_pd(dt);
    __m128d dx;
    __m128d dy;
    __m128d dz;
    __m128d distance_squared;
    __m128d distance;
    __m128d magnitude;
    const __m128d zero_point_five = _mm_set1_pd(0.5);
    const __m128d one_point_five = _mm_set1_pd(1.5);
 
    number dx_array_k;
    number dy_array_k;
    number dz_array_k;
    number magnitude_k;
    number i_body_mass_times_magnitude_k;
    number j_body_mass_times_magnitude_k;

    integer i;
    integer i_plus_1;
    integer j;
    integer k;

    PhysicsPerl__Astro__Body* i_body;
    PhysicsPerl__Astro__Body* j_body;

    for ( integer time_step = 0; time_step < time_steps; time_step++ ) { 

        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            i_body = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                j_body = this->bodies[j].get();
                dx_array[k] = i_body->x - j_body->x;
                dy_array[k] = i_body->y - j_body->y;
                dz_array[k] = i_body->z - j_body->z;
                k++;
            }
        }

        for ( i = 0; i < N; i += 2) {
            i_plus_1 = i + 1;
            dx = _mm_loadl_pd(dx, &dx_array[i]);
            dx = _mm_loadh_pd(dx, &dx_array[i_plus_1]);
            dy = _mm_loadl_pd(dy, &dy_array[i]);
            dy = _mm_loadh_pd(dy, &dy_array[i_plus_1]);
            dz = _mm_loadl_pd(dz, &dz_array[i]);
            dz = _mm_loadh_pd(dz, &dz_array[i_plus_1]);
            distance_squared = (dx * dx) + (dy * dy) + (dz * dz);
            distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(distance_squared)));
            distance = distance * one_point_five - ((zero_point_five * distance_squared) * distance) * (distance * distance);
            distance = distance * one_point_five - ((zero_point_five * distance_squared) * distance) * (distance * distance);
            magnitude = (dt_sse / distance_squared) * distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }

        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            i_body = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                j_body = this->bodies[j].get();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                i_body_mass_times_magnitude_k = i_body->mass * magnitude_k;
                j_body_mass_times_magnitude_k = j_body->mass * magnitude_k;
                
                i_body->vx -= dx_array_k * j_body_mass_times_magnitude_k;
                j_body->vx += dx_array_k * i_body_mass_times_magnitude_k;
                i_body->vy -= dy_array_k * j_body_mass_times_magnitude_k;
                j_body->vy += dy_array_k * i_body_mass_times_magnitude_k;
                i_body->vz -= dz_array_k * j_body_mass_times_magnitude_k;
                j_body->vz += dz_array_k * i_body_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            i_body = this->bodies[i].get();
            i_body->x += dt * i_body->vx;
            i_body->y += dt * i_body->vy;
            i_body->z += dt * i_body->vz;
        }
    }
}


# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
