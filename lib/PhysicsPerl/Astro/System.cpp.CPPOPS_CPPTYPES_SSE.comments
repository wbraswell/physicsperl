// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp 0.003_000

// [[[ INCLUDES ]]]

// NEED FIX
//#include <PhysicsPerl/Astro/System.h>
#include "/home/wbraswell/school/physicsperl/physicsperl-latest/lib/PhysicsPerl/Astro/System.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO METHODS & SUBROUTINES ]]]

void PhysicsPerl__Astro__System::init() {
//    bodies.resize(5);
    // NEED FIX
//    this->bodies = {PhysicsPerl__Astro__Body::sun(), PhysicsPerl__Astro__Body::jupiter(), PhysicsPerl__Astro__Body::saturn(), PhysicsPerl__Astro__Body::uranus(), PhysicsPerl__Astro__Body::neptune()};  // WRONG SCOPE
//    this->bodies = {sun(), jupiter(), saturn(), uranus(), neptune()};  // ERROR
//    this->bodies = {sun()};  // ERROR
//    this->bodies[0] = sun();  // SEGFAULT
    this->bodies.push_back(sun());
    this->bodies.push_back(jupiter());
    this->bodies.push_back(saturn());
    this->bodies.push_back(uranus());
    this->bodies.push_back(neptune());
/*
    this->bodies[0] = sun();
    this->bodies[1] = jupiter();
    this->bodies[2] = saturn();
    this->bodies[3] = uranus();
    this->bodies[4] = neptune();
*/

    number px = 0.0;
    number py = 0.0;
    number pz = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
//    for ( integer i = 0; i < this->bodies.size(); i++ ) {  // NEED UPGRADE: same as above, but more efficient
        px += this->bodies[i]->vx * this->bodies[i]->mass;
        py += this->bodies[i]->vy * this->bodies[i]->mass;
        pz += this->bodies[i]->vz * this->bodies[i]->mass;
    }

    // NEED FIX: move to offset_momentum()
    this->bodies[0]->vx = -1 * (px / SOLAR_MASS);
    this->bodies[0]->vy = -1 * (py / SOLAR_MASS);
    this->bodies[0]->vz = -1 * (pz / SOLAR_MASS);

//    this->bodies[0]->offset_momentum( px, py, pz );
}


number PhysicsPerl__Astro__System::energy() {
    number dx;
    number dy;
    number dz;
    number distance;
    number e = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        PhysicsPerl__Astro__Body* i_body = this->bodies[i].get();
//        PhysicsPerl__Astro__Body* i_body = this->bodies[i];
        e += 0.5 * i_body->mass * ((i_body->vx * i_body->vx) + (i_body->vy * i_body->vy) + (i_body->vz * i_body->vz));
        for ( integer j = (i + 1); j <= ((this->bodies.size()) - 1); j++ ) {
            PhysicsPerl__Astro__Body* j_body = this->bodies[j].get();
//            PhysicsPerl__Astro__Body* j_body = this->bodies[j];
            dx = i_body->x - j_body->x;
            dy = i_body->y - j_body->y;
            dz = i_body->z - j_body->z;
            distance = pow(((dx * dx) + (dy * dy) + (dz * dz)), 0.5);
            e -= (i_body->mass * j_body->mass) / distance;
        }
    }
    return e;
}

void PhysicsPerl__Astro__System::advance_loop(const number dt, const integer time_steps) {
    integer bodies_size = this->bodies.size();
//    constexpr integer N = ((bodies_size - 1) * bodies_size) / 2;
//    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;
    const unsigned int N = 10;

    number_arrayref dx_array;
    number_arrayref dy_array;
    number_arrayref dz_array;
    number_arrayref magnitude_array;
    dx_array.resize(N);
    dy_array.resize(N);
    dz_array.resize(N);
    magnitude_array.resize(N);
/*
    std::array<number,N> dx_array;
    std::array<number,N> dy_array;
    std::array<number,N> dz_array;
    std::array<number,N> magnitude_array;
*/

    const __m128d dt_sse = _mm_set1_pd(dt);
    __m128d dx;
    __m128d dy;
    __m128d dz;
    __m128d distance_squared;
    __m128d distance;
    __m128d magnitude;
    const __m128d zero_point_five = _mm_set1_pd(0.5);
    const __m128d one_point_five = _mm_set1_pd(1.5);
//    __m128d i_body_mass__j_body_mass;
//    __m128d magnitude_k__magnitude_k;
//    __m128d i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
//    __m128d dx_array_k__dx_array_k;
//    __m128d dy_array_k__dy_array_k;
//    __m128d dz_array_k__dz_array_k;
//    __m128d dx_array_k__dx_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
//    __m128d dy_array_k__dy_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
//    __m128d dz_array_k__dz_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;

//    double i_body_mass__j_body_mass__arrayref[2];
 
    number dx_array_k;
    number dy_array_k;
    number dz_array_k;
    number magnitude_k;
    number i_body_mass_times_magnitude_k;
    number j_body_mass_times_magnitude_k;

    integer i;
    integer i_plus_1;
    integer j;
    integer k;

    PhysicsPerl__Astro__Body* i_body;
    PhysicsPerl__Astro__Body* j_body;

    //cerr << "in advance_loop(), have this->bodies.size() = " << this->bodies.size() << "\n";
    for ( integer time_step = 0; time_step < time_steps; time_step++ ) { 
//        //cerr << "in advance_loop(), have time_step = " << time_step << " of " << time_steps << "\n";
        //cerr << "in advance(), have dt =                    " << dt << "\n";
        //cerr << "in advance(), have N  =                    " << N << "\n";

        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            i_body = this->bodies[i].get();
//            i_body = this->bodies[i];
            for ( j = i + 1; j < bodies_size; j++ ) {
                j_body = this->bodies[j].get();
//                j_body = this->bodies[j];
                dx_array[k] = i_body->x - j_body->x;
                dy_array[k] = i_body->y - j_body->y;
                dz_array[k] = i_body->z - j_body->z;
                k++;
            }
        }

    /*
        for ( i = 0; i < N; i++ ) {
            //cerr << "in advance(), have dx_array.at(" << i << ") =        " << dx_array.at(i) << "\n";
            //cerr << "in advance(), have dy_array.at(" << i << ") =        " << dy_array.at(i) << "\n";
            //cerr << "in advance(), have dz_array.at(" << i << ") =        " << dz_array.at(i) << "\n";
        }
    */

        for ( i = 0; i < N; i += 2) {
            //cerr << "in advance(), have magloop i =             " << i << "\n";
            i_plus_1 = i + 1;
            dx = _mm_loadl_pd(dx, &dx_array[i]);
            dx = _mm_loadh_pd(dx, &dx_array[i_plus_1]);
            dy = _mm_loadl_pd(dy, &dy_array[i]);
            dy = _mm_loadh_pd(dy, &dy_array[i_plus_1]);
            dz = _mm_loadl_pd(dz, &dz_array[i]);
            dz = _mm_loadh_pd(dz, &dz_array[i_plus_1]);

            //cerr << "in advance(), have dx low  =               " << dx[0] << "\n";
            //cerr << "in advance(), have dx high =               " << dx[1] << "\n";
            //cerr << "in advance(), have dy low  =               " << dy[0] << "\n";
            //cerr << "in advance(), have dy high =               " << dy[1] << "\n";
            //cerr << "in advance(), have dz low  =               " << dz[0] << "\n";
            //cerr << "in advance(), have dz high =               " << dz[1] << "\n";

            distance_squared = (dx * dx) + (dy * dy) + (dz * dz);
            //cerr << "in advance(), have distance_squared low  = " << distance_squared[0] << "\n";
            //cerr << "in advance(), have distance_squared high = " << distance_squared[1] << "\n";

            distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(distance_squared)));
            //cerr << "in advance(), have distance low  0 =       " << distance[0] << "\n";
            //cerr << "in advance(), have distance high 0 =       " << distance[1] << "\n";

            // NEED ANSWER: WHAT DOES THIS CODE DO???
//            distance = distance * _mm_set1_pd(1.5) - ((_mm_set1_pd(0.5) * distance_squared) * distance) * (distance * distance);
            distance = distance * one_point_five - ((zero_point_five * distance_squared) * distance) * (distance * distance);
            //cerr << "in advance(), have distance low  1 =       " << distance[0] << "\n";
            //cerr << "in advance(), have distance high 1 =       " << distance[1] << "\n";
//            distance = distance * _mm_set1_pd(1.5) - ((_mm_set1_pd(0.5) * distance_squared) * distance) * (distance * distance);
            distance = distance * one_point_five - ((zero_point_five * distance_squared) * distance) * (distance * distance);
            //cerr << "in advance(), have distance low  2 =       " << distance[0] << "\n";
            //cerr << "in advance(), have distance high 2 =       " << distance[1] << "\n";

    //        _mm_store_pd(&magnitude, ((_mm_set1_pd(dt) / distance_squared) * distance));
//            magnitude = (_mm_set1_pd(dt) / distance_squared) * distance;
            magnitude = (dt_sse / distance_squared) * distance;
            //cerr << "in advance(), have magnitude low  =             " << magnitude[0] << "\n";
            //cerr << "in advance(), have magnitude high =             " << magnitude[1] << "\n";

            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];

            //cerr << "in advance(), have magnitude_array.at(" << i << ") = " << magnitude_array.at(i) << "\n";
            //cerr << "in advance(), have magnitude_array.at(" << (i + 1) << ") = " << magnitude_array.at(i+1) << "\n";
    //        //cerr << "in advance(), have magnitude_array.size 2c=" << magnitude_array.size() << "\n";
        }

        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            //cerr << "in advance(), have velloop i =             " << i << "\n";
            i_body = this->bodies[i].get();
//            i_body = this->bodies[i];
            for ( j = i + 1; j < bodies_size; j++ ) {
    //            //cerr << "in advance(), have velloop j =             " << j << "\n";
                j_body = this->bodies[j].get();
//                j_body = this->bodies[j];
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                i_body_mass_times_magnitude_k = i_body->mass * magnitude_k;
                j_body_mass_times_magnitude_k = j_body->mass * magnitude_k;
//                i_body_mass__j_body_mass = _mm_loadl_pd(i_body_mass__j_body_mass, &i_body->mass);
//                i_body_mass__j_body_mass = _mm_loadh_pd(i_body_mass__j_body_mass, &j_body->mass);
//                i_body_mass__j_body_mass__arrayref[0] = i_body->mass;
//                i_body_mass__j_body_mass__arrayref[1] = j_body->mass;
//                i_body_mass__j_body_mass = _mm_loadu_pd((double*)i_body_mass__j_body_mass__arrayref);

//                magnitude_k__magnitude_k = _mm_loadl_pd(magnitude_k__magnitude_k, &magnitude_k);
//                magnitude_k__magnitude_k = _mm_loadh_pd(magnitude_k__magnitude_k, &magnitude_k);
//                magnitude_k__magnitude_k = _mm_load1_pd(&magnitude_array[k]);

//                i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = i_body_mass__j_body_mass * magnitude_k__magnitude_k;
//                i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = i_body_mass__j_body_mass * _mm_load1_pd(&magnitude_array[k]);
//                i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = i_body_mass__j_body_mass * _mm_set1_pd(magnitude_array[k]);
//                i_body_mass_times_magnitude_k = i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[0];
//                j_body_mass_times_magnitude_k = i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[1];

/*
                dx_array_k__dx_array_k = _mm_load1_pd(&dx_array[k]);
                dx_array_k__dx_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = 
                    dx_array_k__dx_array_k * i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
                dy_array_k__dy_array_k = _mm_load1_pd(&dy_array[k]);
                dy_array_k__dy_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = 
                    dy_array_k__dy_array_k * i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
                dz_array_k__dz_array_k = _mm_load1_pd(&dz_array[k]);
                dz_array_k__dz_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k = 
                    dz_array_k__dz_array_k * i_body_mass__j_body_mass__times__magnitude_k__magnitude_k;
*/
                
                //cerr << "in advance(), have i_body->vx 0 =          " << i_body->vx << "\n";
                //cerr << "in advance(), have j_body->vx 0 =          " << j_body->vx << "\n";
                //cerr << "in advance(), have i_body->vy 0 =          " << i_body->vy << "\n";
                //cerr << "in advance(), have j_body->vy 0 =          " << j_body->vy << "\n";
                //cerr << "in advance(), have i_body->vz 0 =          " << i_body->vz << "\n";
                //cerr << "in advance(), have j_body->vz 0 =          " << j_body->vz << "\n";
                //cerr << "in advance(), have i_body->mass =          " << i_body->mass << "\n";
                //cerr << "in advance(), have j_body->mass =          " << j_body->mass << "\n";
                //cerr << "in advance(), have dx_array[" << k << "] =           " << dx_array[k] << "\n";
                //cerr << "in advance(), have dy_array[" << k << "] =           " << dy_array[k] << "\n";
                //cerr << "in advance(), have dz_array[" << k << "] =           " << dz_array[k] << "\n";
                //cerr << "in advance(), have magnitude_array[" << k << "] =    " << magnitude_array[k] << "\n";
                
/*
                // non-SSE, slower
                i_body->vx -= dx_array[k] * j_body->mass * magnitude_array[k];
                j_body->vx += dx_array[k] * i_body->mass * magnitude_array[k];
                i_body->vy -= dy_array[k] * j_body->mass * magnitude_array[k];
                j_body->vy += dy_array[k] * i_body->mass * magnitude_array[k];
                i_body->vz -= dz_array[k] * j_body->mass * magnitude_array[k];
                j_body->vz += dz_array[k] * i_body->mass * magnitude_array[k];
*/
                
                // non-SSE, faster
                i_body->vx -= dx_array_k * j_body_mass_times_magnitude_k;
                j_body->vx += dx_array_k * i_body_mass_times_magnitude_k;
                i_body->vy -= dy_array_k * j_body_mass_times_magnitude_k;
                j_body->vy += dy_array_k * i_body_mass_times_magnitude_k;
                i_body->vz -= dz_array_k * j_body_mass_times_magnitude_k;
                j_body->vz += dz_array_k * i_body_mass_times_magnitude_k;

/*
                // SSE, slower
                i_body->vx -= dx_array_k__dx_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[1];
                j_body->vx += dx_array_k__dx_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[0];
                i_body->vy -= dy_array_k__dy_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[1];
                j_body->vy += dy_array_k__dy_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[0];
                i_body->vz -= dz_array_k__dz_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[1];
                j_body->vz += dz_array_k__dz_array_k__times__i_body_mass__j_body_mass__times__magnitude_k__magnitude_k[0];
*/
 
                //cerr << "in advance(), have i_body->vx 1 =          " << i_body->vx << "\n";
                //cerr << "in advance(), have j_body->vx 1 =          " << j_body->vx << "\n";
                //cerr << "in advance(), have i_body->vy 1 =          " << i_body->vy << "\n";
                //cerr << "in advance(), have j_body->vy 1 =          " << j_body->vy << "\n";
                //cerr << "in advance(), have i_body->vz 1 =          " << i_body->vz << "\n";
                //cerr << "in advance(), have j_body->vz 1 =          " << j_body->vz << "\n";
                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            i_body = this->bodies[i].get();
//            i_body = this->bodies[i];
            i_body->x += dt * i_body->vx;
            i_body->y += dt * i_body->vy;
            i_body->z += dt * i_body->vz;
        }
    }
}

/*
void PhysicsPerl__Astro__System::advance_loop(number dt, integer n) {
    unsigned int N = ((this->bodies.size() - 1) * this->bodies.size()) / 2;
    number_arrayref dx_array, dy_array, dz_array, magnitude_array;
    dx_array.resize(N);
    dy_array.resize(N);
    dz_array.resize(N);
    magnitude_array.resize(N);  
    //cerr << "in advance_loop(), have this->bodies.size() = " << this->bodies.size() << "\n";
    for ( integer time_step = 1; time_step <= n; time_step++ ) { 
//        //cerr << "in advance_loop(), have time_step = " << time_step << " of " << n << "\n";
//        this->advance(dt);
        this->advance(dt, dx_array, dy_array, dz_array, magnitude_array, N);
    }
}
*/

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
