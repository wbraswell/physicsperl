// NOTE! THIS FILE IS OUT OF DATE, KEPT FOR REFERENCE ONLY
// NOTE! THIS FILE IS OUT OF DATE, KEPT FOR REFERENCE ONLY
// NOTE! THIS FILE IS OUT OF DATE, KEPT FOR REFERENCE ONLY


// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_cpp 0.006_000

// [[[ INCLUDES ]]]
#include "PhysicsPerl/Astro/System.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO METHODS & SUBROUTINES ]]]

void PhysicsPerl__Astro__System::get_bodies_element(integer i, PhysicsPerl__Astro__Body_ptr& body_tmp_ptr) {
    *(body_tmp_ptr.get()) = *(this->bodies[i].get());
}

// NEED FIX, CORRELATION #pp04: ‘CLASS’ was not declared in this scope
void PhysicsPerl__Astro__System::get_bodies_element(integer i, PhysicsPerl__Astro__Body_rawptr body_tmp_rawptr) {
//PhysicsPerl__Astro__Body_rawptr PhysicsPerl__Astro__System::get_bodies_element(integer i, PhysicsPerl__Astro__Body_rawptr body_tmp_rawptr) {
//PhysicsPerl__Astro__Body_rawptr PhysicsPerl__Astro__System::get_bodies_element(integer i) {
//    return this->bodies[i].get();

    *body_tmp_rawptr = *(this->bodies[i].get());

//    PhysicsPerl__Astro__Body_rawptr body_tmp_rawptr;
/*
    PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
    body_tmp_rawptr->name = body_i->name;
    body_tmp_rawptr->x = body_i->x;
    body_tmp_rawptr->y = body_i->y;
    body_tmp_rawptr->z = body_i->z;
    body_tmp_rawptr->vx = body_i->vx;
    body_tmp_rawptr->vy = body_i->vy;
    body_tmp_rawptr->vz = body_i->vz;
    body_tmp_rawptr->mass = body_i->mass;
    body_tmp_rawptr->radius = body_i->radius;
    body_tmp_rawptr->color = body_i->color;
*/
//    return body_tmp_rawptr;
}

/* 
// ORIGINAL GOOD, makes copy
void PhysicsPerl__Astro__System::get_bodies_element(integer i, PhysicsPerl__Astro__Body_rawptr body_tmp) { 
    PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
    body_tmp->name = body_i->name;
    body_tmp->x = body_i->x;
    body_tmp->y = body_i->y;
    body_tmp->z = body_i->z;
    body_tmp->vx = body_i->vx;
    body_tmp->vy = body_i->vy;
    body_tmp->vz = body_i->vz;
    body_tmp->mass = body_i->mass;
    body_tmp->radius = body_i->radius;
    body_tmp->color = body_i->color;
}
*/

void PhysicsPerl__Astro__System::init() {
    this->bodies.resize(5);
    this->bodies[0] = sun();
    this->bodies[1] = jupiter();
    this->bodies[2] = saturn();
    this->bodies[3] = uranus();
    this->bodies[4] = neptune();

    number px = 0.0;
    number py = 0.0;
    number pz = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        px += this->bodies[i]->vx * this->bodies[i]->mass;
        py += this->bodies[i]->vy * this->bodies[i]->mass;
        pz += this->bodies[i]->vz * this->bodies[i]->mass;
    }

    this->bodies[0]->vx = -1 * (px / SOLAR_MASS);
    this->bodies[0]->vy = -1 * (py / SOLAR_MASS);
    this->bodies[0]->vz = -1 * (pz / SOLAR_MASS);
}

number PhysicsPerl__Astro__System::energy() {
    number dx;
    number dy;
    number dz;
    number distance;
    number e = 0.0;
    for ( integer i = 0; i <= ((this->bodies.size()) - 1); i++ ) {
        PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
        e += 0.5 * body_i->mass * ((body_i->vx * body_i->vx) + (body_i->vy * body_i->vy) + (body_i->vz * body_i->vz));
        for ( integer j = (i + 1); j <= ((this->bodies.size()) - 1); j++ ) {
            PhysicsPerl__Astro__Body_rawptr body_j = this->bodies[j].get();
            dx = body_i->x - body_j->x;
            dy = body_i->y - body_j->y;
            dz = body_i->z - body_j->z;
            distance = pow(((dx * dx) + (dy * dy) + (dz * dz)), 0.5);
            e -= (body_i->mass * body_j->mass) / distance;
        }
    }
    return e;
}

void PhysicsPerl__Astro__System::advance_loop(const number delta_time, const integer time_step_max) {
    integer time_step;
    integer i;
    integer j;
 
    const integer bodies_size = this->bodies.size();
    const unsigned int bodies_size_triangle = 10;

    number_arrayref dx_array;
    dx_array.resize(bodies_size_triangle);
    number_arrayref dy_array;
    dy_array.resize(bodies_size_triangle);
    number_arrayref dz_array;
    dz_array.resize(bodies_size_triangle);
    number_arrayref magnitude_array;
    magnitude_array.resize(bodies_size_triangle);

    constant_sse_number_pair delta_time_sse = constant_sse_number_pair__new_from_singleton_duplicate(delta_time);
    sse_number_pair dx;
    sse_number_pair dy;
    sse_number_pair dz;
    sse_number_pair distance_squared;
    sse_number_pair distance;
    sse_number_pair magnitude;
    constant_sse_number_pair zero_point_five = constant_sse_number_pair__new_from_singleton_duplicate(0.5);
    constant_sse_number_pair one_point_five = constant_sse_number_pair__new_from_singleton_duplicate(1.5);
 
    number dx_array_k;
    number dy_array_k;
    number dz_array_k;
    number magnitude_k;
    number body_i_mass_times_magnitude_k;
    number body_j_mass_times_magnitude_k;

    integer i_plus_1;
    integer k;

    PhysicsPerl__Astro__Body_rawptr body_i;  // ORIGINAL F13.2
    PhysicsPerl__Astro__Body_rawptr body_j;
//    PhysicsPerl__Astro__Body body_i;  // VS160
//    PhysicsPerl__Astro__Body body_j;
 
/*
    // F13.4
    PhysicsPerl__Astro__Body_rawptr body_rawptrs[bodies_size - 1];
    for (i = 0; i < bodies_size; i++) {
        body_rawptrs[i] = this->bodies[i].get();
    }
*/

    for ( time_step = 0; time_step < time_step_max; time_step++ ) {

        // ORIGINAL MIN POSSIBLE get()s, YES body_i/j, FAST 13.2 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                body_j = this->bodies[j].get();
                dx_array[k] = body_i->x - body_j->x;
                dy_array[k] = body_i->y - body_j->y;
                dz_array[k] = body_i->z - body_j->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                body_j = this->bodies[j].get();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_i->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j->mass * magnitude_k;
                
                body_i->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            body_i = this->bodies[i].get();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
        
/*
        // ->, PREMADE ARRAY, FAST 13.4
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array[k] = body_rawptrs[i]->x - body_rawptrs[j]->x;
                dy_array[k] = body_rawptrs[i]->y - body_rawptrs[j]->y;
                dz_array[k] = body_rawptrs[i]->z - body_rawptrs[j]->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_rawptrs[i]->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_rawptrs[j]->mass * magnitude_k;
                
                body_rawptrs[i]->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_rawptrs[j]->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_rawptrs[i]->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_rawptrs[j]->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_rawptrs[i]->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_rawptrs[j]->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            body_rawptrs[i]->x += delta_time * body_rawptrs[i]->vx;
            body_rawptrs[i]->y += delta_time * body_rawptrs[i]->vy;
            body_rawptrs[i]->z += delta_time * body_rawptrs[i]->vz;
        }
*/

/*
        // (*)., PREMADE ARRAY, FAST 13.4
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array[k] = (*body_rawptrs[i]).x - (*body_rawptrs[j]).x;
                dy_array[k] = (*body_rawptrs[i]).y - (*body_rawptrs[j]).y;
                dz_array[k] = (*body_rawptrs[i]).z - (*body_rawptrs[j]).z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = (*body_rawptrs[i]).mass * magnitude_k;
                body_j_mass_times_magnitude_k = (*body_rawptrs[j]).mass * magnitude_k;
                
                (*body_rawptrs[i]).vx -= dx_array_k * body_j_mass_times_magnitude_k;
                (*body_rawptrs[j]).vx += dx_array_k * body_i_mass_times_magnitude_k;
                (*body_rawptrs[i]).vy -= dy_array_k * body_j_mass_times_magnitude_k;
                (*body_rawptrs[j]).vy += dy_array_k * body_i_mass_times_magnitude_k;
                (*body_rawptrs[i]).vz -= dz_array_k * body_j_mass_times_magnitude_k;
                (*body_rawptrs[j]).vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            (*body_rawptrs[i]).x += delta_time * (*body_rawptrs[i]).vx;
            (*body_rawptrs[i]).y += delta_time * (*body_rawptrs[i]).vy;
            (*body_rawptrs[i]).z += delta_time * (*body_rawptrs[i]).vz;
        }
*/

/*
        // *get(), NO body_i/j, LESS FAST 15 - 16 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array[k] = (*this->bodies[i].get()).x - (*this->bodies[j].get()).x;
                dy_array[k] = (*this->bodies[i].get()).y - (*this->bodies[j].get()).y;
                dz_array[k] = (*this->bodies[i].get()).z - (*this->bodies[j].get()).z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = (*this->bodies[i].get()).mass * magnitude_k;
                body_j_mass_times_magnitude_k = (*this->bodies[j].get()).mass * magnitude_k;
                
                (*this->bodies[i].get()).vx -= dx_array_k * body_j_mass_times_magnitude_k;
                (*this->bodies[j].get()).vx += dx_array_k * body_i_mass_times_magnitude_k;
                (*this->bodies[i].get()).vy -= dy_array_k * body_j_mass_times_magnitude_k;
                (*this->bodies[j].get()).vy += dy_array_k * body_i_mass_times_magnitude_k;
                (*this->bodies[i].get()).vz -= dz_array_k * body_j_mass_times_magnitude_k;
                (*this->bodies[j].get()).vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            (*this->bodies[i].get()).x += delta_time * (*this->bodies[i].get()).vx;
            (*this->bodies[i].get()).y += delta_time * (*this->bodies[i].get()).vy;
            (*this->bodies[i].get()).z += delta_time * (*this->bodies[i].get()).vz;
        }
*/

/*
        // MIXED const& *get(), YES MIXED body_i/j, FAST 13.2 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            const PhysicsPerl__Astro__Body& body_i = *this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                const PhysicsPerl__Astro__Body& body_j = *this->bodies[j].get();
                dx_array[k] = body_i.x - body_j.x;
                dy_array[k] = body_i.y - body_j.y;
                dz_array[k] = body_i.z - body_j.z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                PhysicsPerl__Astro__Body_rawptr body_j = this->bodies[j].get();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_i->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j->mass * magnitude_k;
                
                body_i->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
*/

/*
        // *get(), YES body_i/j, VERY SLOW 160 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = *this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                body_j = *this->bodies[j].get();
                dx_array[k] = body_i.x - body_j.x;
                dy_array[k] = body_i.y - body_j.y;
                dz_array[k] = body_i.z - body_j.z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            body_i = *this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                body_j = *this->bodies[j].get();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_i.mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j.mass * magnitude_k;
                
                body_i.vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j.vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i.vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j.vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i.vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j.vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
                
                *this->bodies[j].get() = body_j;
            }
            *this->bodies[i].get() = body_i;
        }

        for ( i = 0; i < bodies_size; i++ ) {
            body_i = *this->bodies[i].get();
            body_i.x += delta_time * body_i.vx;
            body_i.y += delta_time * body_i.vy;
            body_i.z += delta_time * body_i.vz;
            *this->bodies[i].get() = body_i;
        }
*/

/*
        // MIN POSSIBLE get()s, YES LOCAL body_i/j, FAST 13.3 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                PhysicsPerl__Astro__Body_rawptr body_j = this->bodies[j].get();
                dx_array[k] = body_i->x - body_j->x;
                dy_array[k] = body_i->y - body_j->y;
                dz_array[k] = body_i->z - body_j->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
        
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
            for ( j = i + 1; j < bodies_size; j++ ) {
                PhysicsPerl__Astro__Body_rawptr body_j = this->bodies[j].get();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_i->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j->mass * magnitude_k;
                
                body_i->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            PhysicsPerl__Astro__Body_rawptr body_i = this->bodies[i].get();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
*/

/*
// NO get()s, NO body_i/j, LESS FAST 15 - 16 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array[k] = this->bodies[i]->x - this->bodies[j]->x;
                dy_array[k] = this->bodies[i]->y - this->bodies[j]->y;
                dz_array[k] = this->bodies[i]->z - this->bodies[j]->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }


        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = this->bodies[i]->mass * magnitude_k;
                body_j_mass_times_magnitude_k = this->bodies[j]->mass * magnitude_k;
                this->bodies[i]->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j]->vx += dx_array_k * body_i_mass_times_magnitude_k;
                this->bodies[i]->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j]->vy += dy_array_k * body_i_mass_times_magnitude_k;
                this->bodies[i]->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j]->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            this->bodies[i]->x += delta_time * this->bodies[i]->vx;
            this->bodies[i]->y += delta_time * this->bodies[i]->vy;
            this->bodies[i]->z += delta_time * this->bodies[i]->vz;
        }
*/

/* 
// ALL POSSIBLE REDUNDANT get()s and ->, NO body_i/j, LESS FAST 15 - 20 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array[k] = this->bodies[i].get()->x - this->bodies[j].get()->x;
                dy_array[k] = this->bodies[i].get()->y - this->bodies[j].get()->y;
                dz_array[k] = this->bodies[i].get()->z - this->bodies[j].get()->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }


        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            for ( j = i + 1; j < bodies_size; j++ ) {
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = this->bodies[i].get()->mass * magnitude_k;
                body_j_mass_times_magnitude_k = this->bodies[j].get()->mass * magnitude_k;
                this->bodies[i].get()->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j].get()->vx += dx_array_k * body_i_mass_times_magnitude_k;
                this->bodies[i].get()->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j].get()->vy += dy_array_k * body_i_mass_times_magnitude_k;
                this->bodies[i].get()->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                this->bodies[j].get()->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }

        for ( i = 0; i < bodies_size; i++ ) {
            this->bodies[i].get()->x += delta_time * this->bodies[i].get()->vx;
            this->bodies[i].get()->y += delta_time * this->bodies[i].get()->vy;
            this->bodies[i].get()->z += delta_time * this->bodies[i].get()->vz;
        }
*/
 
/*
// ALL POSSIBLE REDUNDANT get()s and ->, YES body_i/j, LESS FAST 15 - 16 seconds
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            const std::unique_ptr<PhysicsPerl__Astro__Body>& body_i = this->bodies[i];
            for ( j = i + 1; j < bodies_size; j++ ) {
                const std::unique_ptr<PhysicsPerl__Astro__Body>& body_j = this->bodies[j];
                dx_array[k] = body_i.get()->x - body_j.get()->x;
                dy_array[k] = body_i.get()->y - body_j.get()->y;
                dz_array[k] = body_i.get()->z - body_j.get()->z;
                k++;
            }
        }

        for ( i = 0; i < bodies_size_triangle; i += 2) {
            i_plus_1 = i + 1;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            magnitude_array[i] = magnitude[0];
            magnitude_array[i_plus_1] = magnitude[1];
        }
 
        k = 0;
        for ( i = 0; i < bodies_size; i++ ) {
            const std::unique_ptr<PhysicsPerl__Astro__Body>& body_i = this->bodies[i];
            for ( j = i + 1; j < bodies_size; j++ ) {
                const std::unique_ptr<PhysicsPerl__Astro__Body>& body_j = this->bodies[j];
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];

                body_i_mass_times_magnitude_k = body_i.get()->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j.get()->mass * magnitude_k;
                body_i.get()->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j.get()->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i.get()->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j.get()->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i.get()->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j.get()->vz += dz_array_k * body_i_mass_times_magnitude_k;

                k++;
            }
        }
 
        for ( i = 0; i < bodies_size; i++ ) {
            const std::unique_ptr<PhysicsPerl__Astro__Body>& body_i = this->bodies[i];
            body_i.get()->x += delta_time * body_i.get()->vx;
            body_i.get()->y += delta_time * body_i.get()->vy;
            body_i.get()->z += delta_time * body_i.get()->vz;
        }
*/


    }
}


# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
