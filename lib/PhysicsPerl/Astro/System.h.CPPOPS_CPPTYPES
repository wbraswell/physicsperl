// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_h
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_h 0.001_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/CompileUnit/Module/Class.cpp>
#include <math.h>

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class PhysicsPerl__Astro__System : public RPerl__CompileUnit__Module__Class {
public:
// [[[ OO METHODS ]]]
    void init();
    void advance(number dt);
    number energy();

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    PhysicsPerl::Astro::Body_arrayref get_bodies() { return this->bodies; }
    void set_bodies(PhysicsPerl::Astro::Body_arrayref bodies_new) { this->bodies = bodies_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    PhysicsPerl__Astro__System() {}
    ~PhysicsPerl__Astro__System() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "PhysicsPerl::Astro::System"; }

private:
// [[[ OO PROPERTIES ]]]
    PhysicsPerl::Astro::Body_arrayref bodies;
};

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer PhysicsPerl__Astro__System__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
