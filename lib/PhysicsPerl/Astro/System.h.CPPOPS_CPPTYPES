// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__System_h
#define __CPP__INCLUDED__PhysicsPerl__Astro__System_h 0.006_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperltypes.h; HelperFunctions.cpp)
#include <RPerl/CompileUnit/Module/Class.cpp>
#include "PhysicsPerl/Astro/Body.cpp"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class PhysicsPerl__Astro__System : public RPerl__CompileUnit__Module__Class__CPP {
public:
    // [[[ OO PROPERTIES ]]]
    PhysicsPerl__Astro__Body_arrayref bodies;

    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    integer get_bodies_size() { return this->bodies.size(); }  // call from Perl or C++
    PhysicsPerl__Astro__Body_ptr& get_bodies_element(integer i) { return this->bodies[i]; }  // call from C++
    void get_bodies_element_indirect(integer i, PhysicsPerl__Astro__Body_rawptr bodies_element_rawptr) { *bodies_element_rawptr = *(this->bodies[i].get_raw()); }  // call from Perl shim
    void set_bodies_element(integer i, PhysicsPerl__Astro__Body_ptr& bodies_element_ptr) { *(this->bodies[i].get_raw()) = *(bodies_element_ptr.get_raw()); }  // call from C++
    void set_bodies_element(integer i, PhysicsPerl__Astro__Body_rawptr bodies_element_rawptr) { *(this->bodies[i].get_raw()) = *bodies_element_rawptr; }  // call from Perl

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    PhysicsPerl__Astro__System() {
        this->bodies.resize(5);
    }
    ~PhysicsPerl__Astro__System() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "PhysicsPerl::Astro::System"; }

    // <<< USER-DEFINED METHODS >>>
    void init();
    number energy();
    void advance_loop(const number delta_time, const integer time_step_max);
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define PhysicsPerl__Astro__System_rawptr PhysicsPerl__Astro__System*
typedef std::unique_ptr<PhysicsPerl__Astro__System> PhysicsPerl__Astro__System_ptr;
typedef std::vector<PhysicsPerl__Astro__System_ptr> PhysicsPerl__Astro__System_arrayref;
typedef std::unordered_map<string, PhysicsPerl__Astro__System_ptr> PhysicsPerl__Astro__System_hashref;
typedef std::unordered_map<string, PhysicsPerl__Astro__System_ptr>::iterator PhysicsPerl__Astro__System_hashref_iterator;

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer PhysicsPerl__Astro__System__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
