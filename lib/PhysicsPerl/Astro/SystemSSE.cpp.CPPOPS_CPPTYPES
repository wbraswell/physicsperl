// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__SystemSSE_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__SystemSSE_cpp 0.010_000

// [[[ INCLUDES ]]]
#include "PhysicsPerl/Astro/SystemSSE.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void PhysicsPerl__Astro__SystemSSE::advance_loop(const number delta_time, const integer time_step_max) {
    unsigned_integer i;
    unsigned_integer j;
    integer time_step;
    const unsigned_integer bodies_size = this->bodies.size();
    const unsigned_integer bodies_size_triangle = ((bodies_size - 1) * bodies_size) / 2;
    number_arrayref dx_array;
    dx_array.resize((bodies_size_triangle + 1));
    number_arrayref dy_array;
    dy_array.resize((bodies_size_triangle + 1));
    number_arrayref dz_array;
    dz_array.resize((bodies_size_triangle + 1));
    number_arrayref magnitude_array;
    magnitude_array.resize((bodies_size_triangle + 1));
    const sse_number_pair delta_time_sse = constant_sse_number_pair__new_from_singleton_duplicate(delta_time);
    sse_number_pair dx;
    sse_number_pair dy;
    sse_number_pair dz;
    sse_number_pair distance_squared;
    sse_number_pair distance;
    sse_number_pair magnitude;
    const sse_number_pair zero_point_five = constant_sse_number_pair__new_from_singleton_duplicate(0.5);
    const sse_number_pair one_point_five = constant_sse_number_pair__new_from_singleton_duplicate(1.5);
    number dx_array_k;
    number dy_array_k;
    number dz_array_k;
    number magnitude_k;
    number body_i_mass_times_magnitude_k;
    number body_j_mass_times_magnitude_k;
    unsigned_integer i_plus_1;
    unsigned_integer k;
    PhysicsPerl__Astro__Body_rawptr body_i;
    PhysicsPerl__Astro__Body_rawptr body_j;
    for ( time_step = 0; time_step < time_step_max; time_step++ ) {
        prerr "in SystemSSE::advance_loop(), before loop 0.0, have $bodies_size = " << bodies_size << endl;
        prerr "in SystemSSE::advance_loop(), before loop 0.0, have $bodies_size_triangle = " << bodies_size_triangle << endl;
        k = 0;
        for ( i = 0; i < (bodies_size - 1); i++ ) {
            prerr "in SystemSSE::advance_loop(), top of loop 0.0, have $i = " << i << ", $k = " << k << endl;
            body_i = this->bodies[i].get_raw();
            for ( j = (i + 1); j < bodies_size; j++ ) {
                prerr "in SystemSSE::advance_loop(), top of loop 0.0.0, have $i = " << i << ", $j = " << j << ", $k = " << k << endl;
                body_j = this->bodies[j].get_raw();
                dx_array[k] = body_i->x - body_j->x;
                prerr "in SystemSSE::advance_loop(), in loop 0.0.0, have $dx_array->[$k] = " << dx_array[k] << endl;
                dy_array[k] = body_i->y - body_j->y;
                prerr "in SystemSSE::advance_loop(), in loop 0.0.0, have $dy_array->[$k] = " << dy_array[k] << endl;
                dz_array[k] = body_i->z - body_j->z;
                prerr "in SystemSSE::advance_loop(), in loop 0.0.0, have $dz_array->[$k] = " << dz_array[k] << endl;
                k++;
            }
            if ( k <= bodies_size_triangle ) {
                prerr "in SystemSSE::advance_loop(), bottom of loop 0.0, have $i = " << i << ", $k = " << k << ", YES (0,0,0) INITIALIZE" << endl;
                dx_array[k] = 0;
                dy_array[k] = 0;
                dz_array[k] = 0;
            }
            else {
                prerr "in SystemSSE::advance_loop(), bottom of loop 0.0, have $i = " << i << ", $k = " << k << ", NO  (0,0,0) INITIALIZE" << endl;
            }
        }
        for ( i = 0; i < bodies_size_triangle; i += 2 ) {
            prerr "in SystemSSE::advance_loop(), top of loop 0.1, have $i = " << i << endl;
            i_plus_1 = i + 1;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.a, have $i_plus_1 = " << i_plus_1 << endl;
            dx[0] = dx_array[i];
            dx[1] = dx_array[i_plus_1];
            dy[0] = dy_array[i];
            dy[1] = dy_array[i_plus_1];
            dz[0] = dz_array[i];
            dz[1] = dz_array[i_plus_1];
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.b, have $dx->[0] = " << dx[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.c, have $dy->[0] = " << dy[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.d, have $dz->[0] = " << dz[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.e, have $dx->[1] = " << dx[1] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.f, have $dy->[1] = " << dy[1] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.g, have $dz->[1] = " << dz[1] << endl;
            distance_squared = (dx sse_mul dx) sse_add (dy sse_mul dy) sse_add (dz sse_mul dz);
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.h, have $distance_squared->[0] = " << distance_squared[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.h, have $distance_squared->[1] = " << distance_squared[1] << endl;
            distance = sse_recip_sqrt_32bit_on_64bit(distance_squared);
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.i, have $distance->[0] = " << distance[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.i, have $distance->[1] = " << distance[1] << endl;
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.j, have $distance->[0] = " << distance[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.j, have $distance->[1] = " << distance[1] << endl;
            distance = distance sse_mul one_point_five sse_sub ((zero_point_five sse_mul distance_squared) sse_mul distance) sse_mul (distance sse_mul distance);
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.k, have $distance->[0] = " << distance[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.k, have $distance->[1] = " << distance[1] << endl;
            magnitude = (delta_time_sse sse_div distance_squared) sse_mul distance;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.l, have $magnitude->[0] = " << magnitude[0] << endl;
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.l, have $magnitude->[1] = " << magnitude[1] << endl;
            magnitude_array[i] = magnitude[0];
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.m, have $magnitude_array->[$i] = " << magnitude_array[i] << endl;
            magnitude_array[i_plus_1] = magnitude[1];
            prerr "in SystemSSE::advance_loop(), in loop 0.1, checkpoint 0.1.n, have $magnitude_array->[$i_plus_1] = " << magnitude_array[i_plus_1] << endl;
        }
        k = 0;
        for ( i = 0; i < (bodies_size - 1); i++ ) {
            prerr "in SystemSSE::advance_loop(), top of loop 0.2, have $i = " << i << endl;
            body_i = this->bodies[i].get_raw();
            for ( j = (i + 1); j < bodies_size; j++ ) {
                prerr "in SystemSSE::advance_loop(), top of loop 0.2.1, have $k = " << k << endl;
                body_j = this->bodies[j].get_raw();
                dx_array_k = dx_array[k];
                dy_array_k = dy_array[k];
                dz_array_k = dz_array[k];
                magnitude_k = magnitude_array[k];
                body_i_mass_times_magnitude_k = body_i->mass * magnitude_k;
                body_j_mass_times_magnitude_k = body_j->mass * magnitude_k;
                body_i->vx -= dx_array_k * body_j_mass_times_magnitude_k;
                body_j->vx += dx_array_k * body_i_mass_times_magnitude_k;
                body_i->vy -= dy_array_k * body_j_mass_times_magnitude_k;
                body_j->vy += dy_array_k * body_i_mass_times_magnitude_k;
                body_i->vz -= dz_array_k * body_j_mass_times_magnitude_k;
                body_j->vz += dz_array_k * body_i_mass_times_magnitude_k;
                k++;
            }
        }
        for ( i = 0; i < bodies_size; i++ ) {
            prerr "in SystemSSE::advance_loop(), top of loop 0.3, have $i = " << i << endl;
            body_i = this->bodies[i].get_raw();
            body_i->x += delta_time * body_i->vx;
            body_i->y += delta_time * body_i->vy;
            body_i->z += delta_time * body_i->vz;
        }
    }
    return;
    return;
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
