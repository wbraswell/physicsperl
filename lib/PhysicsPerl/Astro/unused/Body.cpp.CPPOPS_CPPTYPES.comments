using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__PhysicsPerl__Astro__Body_cpp
#define __CPP__INCLUDED__PhysicsPerl__Astro__Body_cpp 0.005_000

#include "PhysicsPerl/Astro/Body.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

PhysicsPerl__Astro__Body_ptr sun() {
    PhysicsPerl__Astro__Body_ptr body(new PhysicsPerl__Astro__Body);
    body->name = "The Sun (Sol)";
    body->x =      0;
    body->y =      0;
    body->z =      0;
    body->vx =     0;
    body->vy =     0;
    body->vz =     0;
    body->mass =   SOLAR_MASS;
    body->radius = 1;
    body->color  = {255, 245, 240};
    return body;
}

PhysicsPerl__Astro__Body_ptr jupiter() {
    PhysicsPerl__Astro__Body_ptr body(new PhysicsPerl__Astro__Body);
    body->name = "Jupiter";
    body->x =      +4.84143144246472090e+00;
    body->y =      -1.16032004402742839e+00;
    body->z =      -1.03622044471123109e-01;
    body->vx =     +1.66007664274403694e-03 * DAYS_PER_YEAR;
    body->vy =     +7.69901118419740425e-03 * DAYS_PER_YEAR;
    body->vz =     -6.90460016972063023e-05 * DAYS_PER_YEAR;
    body->mass =   +9.54791938424326609e-04 * SOLAR_MASS;
    body->radius = +1.00403561683183e-01;
    body->color  = {175, 75, 25};
    return body;
}

PhysicsPerl__Astro__Body_ptr saturn() {
    PhysicsPerl__Astro__Body_ptr body(new PhysicsPerl__Astro__Body);
    body->name = "Saturn";
    body->x =      +8.34336671824457987e+00;
    body->y =      +4.12479856412430479e+00;
    body->z =      -4.03523417114321381e-01;
    body->vx =     -2.76742510726862411e-03 * DAYS_PER_YEAR;
    body->vy =     +4.99852801234917238e-03 * DAYS_PER_YEAR;
    body->vz =     +2.30417297573763929e-05 * DAYS_PER_YEAR;
    body->mass =   +2.85885980666130812e-04 * SOLAR_MASS;
    body->radius = +8.36306189860692e-02;
    body->color  = {250, 215, 160};
    return body;
}

PhysicsPerl__Astro__Body_ptr uranus() {
    PhysicsPerl__Astro__Body_ptr body(new PhysicsPerl__Astro__Body);
    body->name = "Uranus";
    body->x =      +1.28943695621391310e+01;
    body->y =      -1.51111514016986312e+01;
    body->z =      -2.23307578892655734e-01;
    body->vx =     +2.96460137564761618e-03 * DAYS_PER_YEAR;
    body->vy =     +2.37847173959480950e-03 * DAYS_PER_YEAR;
    body->vz =     -2.96589568540237556e-05 * DAYS_PER_YEAR;
    body->mass =   +4.36624404335156298e-05 * SOLAR_MASS;
    body->radius = +3.64225190291541e-02;
    body->color  = {0, 240, 255};
    return body;
}

PhysicsPerl__Astro__Body_ptr neptune() {
    PhysicsPerl__Astro__Body_ptr body(new PhysicsPerl__Astro__Body);
    body->name = "Neptune";
    body->x =      +1.53796971148509165e+01;
    body->y =      -2.59193146099879641e+01;
    body->z =      +1.79258772950371181e-01;
    body->vx =     +2.68067772490389322e-03 * DAYS_PER_YEAR;
    body->vy =     +1.62824170038242295e-03 * DAYS_PER_YEAR;
    body->vz =     -9.51592254519715870e-05 * DAYS_PER_YEAR;
    body->mass =   +5.15138902046611451e-05 * SOLAR_MASS;
    body->radius = +3.53597587246876e-02;
    body->color  = {55, 85, 230};
    return body;
}

// CORRELATION #pp10: unfinished attempt to manually define pack/unpack for object return type
// [[[ TYPEMAP PACK/UNPACK FOR __CPP__TYPES ]]]

/*
// convert from (Perl object AKA Perl SV containing reference to (Perl HV of (Perl SVs containing mixed types))) to (C++ object)
PhysicsPerl__Astro__Body XS_unpack_PhysicsPerl__Astro__Body(SV* input_hv_ref) {
//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_unpack_integer_hashref(), top of subroutine\n");
//  integer_hashref_CHECK(input_hv_ref);
    integer_hashref_CHECKTRACE(input_hv_ref, "input_hv_ref", "XS_unpack_integer_hashref()");

    HV* input_hv;
    integer input_hv_num_keys;
    integer i;
    HE* input_hv_entry;
    SV* input_hv_entry_key;
    SV* input_hv_entry_value;
    integer_hashref output_unordered_map;

    input_hv = (HV*)SvRV(input_hv_ref);

    input_hv_num_keys = hv_iterinit(input_hv);
//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_unpack_integer_hashref(), have input_hv_num_keys = %d\n", input_hv_num_keys);

    // UNORDERED MAP ENTRY ASSIGNMENT, OPTION A, SUBSCRIPT, KNOWN SIZE: unordered_map has programmer-provided const size or compiler-guessable size,
    // reserve() ahead of time to avoid resizing and rehashing in for() loop
    output_unordered_map.reserve((size_t)input_hv_num_keys);

    for (i = 0;  i < input_hv_num_keys;  ++i)  // incrementing iteration, iterator i not actually used in loop body
    {
        // does not utilize i in entry retrieval
        input_hv_entry = hv_iternext(input_hv);
        // DEV NOTE: hash entry type-checking already done as part of integer_hashref_CHECKTRACE()
//      hashentry_CHECK(input_hv_entry);
//      hashentry_CHECKTRACE(input_hv_entry, "input_hv_entry", "XS_unpack_integer_hashref()");

        input_hv_entry_key = hv_iterkeysv(input_hv_entry);
        input_hv_entry_value = hv_iterval(input_hv, input_hv_entry);
        // DEV NOTE: integer type-checking already done as part of integer_hashref_CHECKTRACE()
//      integer_CHECK(input_hv_entry_value);
//      integer_CHECKTRACE(input_hv_entry_value, (char*)((string)"input_hv_entry_value at key '" + (string)SvPV_nolen(input_hv_entry_key) + "'").c_str(), "XS_unpack_integer_hashref()");

        // UNORDERED MAP ENTRY ASSIGNMENT, OPTION A, SUBSCRIPT, KNOWN SIZE: l-value subscript notation with no further reserve(); does not utilize i in assignment
        output_unordered_map[SvPV_nolen(input_hv_entry_key)] = SvIV(input_hv_entry_value);
    }

//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_unpack_integer_hashref(), after for() loop, have output_unordered_map.size() = %d\n", output_unordered_map.size());
//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_unpack_integer_hashref(), bottom of subroutine\n");

    return(output_unordered_map);
}
*/

/*
// convert from (C++ object) to (Perl object AKA Perl SV containing reference to (Perl HV of (Perl SVs containing mixed types)))
void XS_pack_PhysicsPerl__Astro__Body(SV* output_hv_ref, PhysicsPerl__Astro__Body input_object) {
//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_pack_PhysicsPerl__Astro__Body(), top of subroutine\n");

    HV* output_hv = newHV();  // initialize output hash to empty
    SV* temp_sv_pointer;

    string property_name = "name";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVpv((const char*)(input_object.name.c_str()), 0), (U32)0);
    property_name = "x";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.x), (U32)0);
    property_name = "y";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.y), (U32)0);
    property_name = "z";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.z), (U32)0);
    property_name = "vx";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.vx), (U32)0);
    property_name = "vy";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.vy), (U32)0);
    property_name = "vz";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.vz), (U32)0);
    property_name = "mass";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.mass), (U32)0);
    property_name = "radius";
    hv_store(output_hv, (const char*)(property_name.c_str()), (U32)(property_name.size()), newSVnv(input_object.radius), (U32)0);

    temp_sv_pointer = newSVrv(output_hv_ref, NULL);   // upgrade output stack SV to an RV
    SvREFCNT_dec(temp_sv_pointer);       // discard temporary pointer
    SvRV(output_hv_ref) = (SV*)output_hv;      // make output stack RV point at our output HV

//  fprintf(stderr, "in CPPOPS_CPPTYPES XS_pack_PhysicsPerl__Astro__Body(), bottom of subroutine\n");
}
*/

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
